service: four-courts-tracker

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    migration:
      dir: local-dynamo/migrate
    seed:
      main:
        sources:
          - table: four-courts-tracker-dev
            sources: [./local-dynamo/seed.json]

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  versionFunctions: false
  memorySize: 128
  timeout: 10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${file(./secrets.json):AUTH0_CLIENT_SECRET}
    GOOGLE_CLIENT_ID: ${file(./secrets.json):GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${file(./secrets.json):GOOGLE_CLIENT_SECRET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"


functions:
  updateUser:
    handler: handler.updateUser
    events:
      - http:
          path: api/updateUser
          method: post
          cors: true
  removeUser:
    handler: handler.removeUser
    events:
      - http:
          path: api/removeUser
          method: get
          cors: true
  getEvents:
    handler: handler.getEvents
    events:
      - http:
          path: api/events
          method: get
          cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    FourCourtsTrackerDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}